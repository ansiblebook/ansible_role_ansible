---
# Configure python and ansible

- name: Install programming packages
  package:
    name: "{{ programming_packages }}"
    state: present
    update_cache: true
  tags:
    - packages
    - python

- name: Create tmp directory for caching
  file:
    path: "{{ pypi_cache }}"
    state: directory
    mode: '1777'
  tags:
    - pypi

- name: Create Ansible directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ collections_dir }}"
    - "{{ roles_dir }}"

- name: Set the_dir default value
  set_fact:
    the_dir: /etc
  tags:
    - ansible

- name: Get user home directory
  getent:
    database: passwd
    key: "{{ intended_user }}"
    split: ':'
  tags:
    - ansible

- name: Set the_dir fact to the user's home directory
  when: getent_result is defined
  set_fact:
    # getent_passwd is the output of the getent command
    the_dir: getent_passwd[intended_user][4]
  tags:
    - ansible

- name: Set facts for creates arguments of shell tasks
  set_fact:
    collections_dir: "{{ the_dir }}/ansible/collections/ansible_collections/"
  tags:
    - ansible

- name: Install proxy configuration in /etc/profile.d/proxy.sh
  when: proxy_host is defined
  template:
    src: proxy.sh.j2
    dest: /etc/profile.d/proxy.sh
    owner: root
    group: root
    mode: 0644
  tags:
    - proxy

- name: Install Pip proxy configuration in /etc/pip.conf
  when: pypi_trusted_host is defined or pypi_index is defined
  template:
    src: pip.conf.j2
    dest: /etc/pip.conf
    owner: root
    group: root
    mode: 0644
  tags:
    - pypi

- name: Prepare pip
  block:
    - name: Clear pip_args
      set_fact:
        pip_args: ''

    - name: Set pip_args
      when: pypi_trusted_host is defined
      set_fact:
        pip_args: "{{ pip_args }} --trusted-host {{ pypi_trusted_host }}"

    - name: Set cache_dir
      when: pypi_cache is defined
      set_fact:
        pip_args: "{{ pip_args }} --cache-dir {{ pypi_cache }}"

    - name: Set pypi options
      when: pypi_index is defined
      set_fact:
        pip_args "{{ pip_args }} -i {{ pypi_index }}"
  when: pip_args is not defined
  tags:
    - pypi

- name: Create virtualenv with wheel package support
  become: true
  pip:
    virtualenv: /usr/local
    virtualenv_command: /bin/python3.8 -m venv
    virtualenv_site_packages: true
    name: wheel
    extra_args: "{{ pip_args }}"
    umask: '0022'
  tags:
    - python

- name: Set permissions on virtualenv config
  file:
    path: /usr/local/pyvenv.cfg
    mode: u=rwX,g=rX,o=rX

- name: Copy requirements
  become: true
  template:
    src: "{{ the_template_dir }}{{ item }}"
    dest: /tmp/
    mode: 0644
  loop:
    - requirements.txt
    - requirements.yml
  tags:
    - python
    - ansible

- name: Install local Python libraries
  become: true
  pip:
    requirements: /tmp/requirements.txt
    virtualenv: /usr/local
    extra_args: "{{ pip_args }}"
    umask: '0022'
    state: "{{ desired_state | default('present', true) }}"
  tags:
    - python
    - ansible

- name: Set permissions on local applications
  file:
    path: "/usr/local/{{ item }}"
    mode: u=rwx,g=rx,o=rx
    recurse: true
  loop:
    - bin/
    - lib/
    - lib64/

- name: Collect the list of services
  service_facts:

- name: Select local applications
  command: ls -1 /usr/local/bin/
  register: local_apps
  when:
    - ansible_facts.services is defined
    - "'fapolicyd.service' in ansible_facts.services"

- name: Grant local applications permission
  command: "fapolicyd-cli --file add /usr/local/bin/{{ item }}"
  loop: "{{ local_apps.stdout_lines }}"
  register: add
  failed_when: false
  changed_when: true
  when:
    - ansible_facts.services is defined
    - "'fapolicyd.service' in ansible_facts.services"
  notify:
    - Restart fapolicyd

- name: Update fapolicyd
  become: true
  when:
    - ansible_facts.services is defined
    - "'fapolicyd.service' in ansible_facts.services"
  command: fapolicyd-cli --update
  changed_when: true

- name: Flush handlers
  meta: flush_handlers

- name: Install Ansible collections
  become: true
  shell: |
    export PATH=/usr/local/bin:$PATH
    umask 0022
    source /usr/local/bin/activate && \
    ansible-galaxy collection install \
    -r /tmp/requirements.yml \
    -p {{ collections_dir }}
  args:
    creates: "{{ collections_dir }}/ansible/posix/shippable.yml"
  tags:
    - ansible
    - collections

- name: Install Ansible roles
  become: true
  shell: |
    export PATH=/usr/local/bin:$PATH
    umask 0022
    source /usr/local/bin/activate && \
    ansible-galaxy install -f \
    -r /tmp/requirements.yml \
    -p {{ roles_dir }}
  args:
    creates: "{{ roles_dir }}/ssh/meta/main.yml"
  tags:
    - ansible
    - roles
...
